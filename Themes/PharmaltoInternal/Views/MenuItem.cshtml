@using Orchard.ContentManagement;
@using System.Linq;
@using System.Collections;

@{
    // odd formatting in this file is to cause more attractive results in the output.
    var items = Enumerable.Cast<dynamic>((System.Collections.IEnumerable)Model);
}

@{
    String iconUrl;

    iconUrl = null;
   
    iconUrl = Model.Content.ContentItem.ContentType == "ContentMenuItem" ? Model.Content.ContentItem.ContentMenuItem.Icon.Url : null;
       
if (!HasText(Model.Text)) {
    @DisplayChildren(Model)
} else {
    string requestUrl = Request.Path.Replace(Request.ApplicationPath, string.Empty).TrimEnd('/').ToUpperInvariant();
    string modelUrl = Model.Href.Replace(Request.ApplicationPath, string.Empty).TrimEnd('/').ToUpperInvariant();
    if (requestUrl == modelUrl || (!string.IsNullOrEmpty(modelUrl) && requestUrl.StartsWith(modelUrl + "/"))) { 
	    Model.Classes.Add("active");
    }
    if(items.Any()) {
        Model.Classes.Add("dropdown");
    }
    var tag = Tag(Model, "li");
    @tag.StartElement
    
    if (!String.IsNullOrEmpty(iconUrl))
    {
        @Html.Image(iconUrl, "", null)
    } 
    
    @* morphing the shape to keep Model untouched*@
    Model.Metadata.Alternates.Clear(); 
    if (items.Any()) {
        Model.Metadata.Type = "MenuItemLinkdd";
    }
    else {
        Model.Metadata.Type = "MenuItemLink";
    }
    @Display(Model)
    
    if (items.Any()) {
        <ul class="dropdown-menu">
        @DisplayChildren(Model)
        </ul>
    }
    @tag.EndElement
    }
}